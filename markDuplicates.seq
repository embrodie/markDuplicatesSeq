
from ReadPairClass import ReadPair

import sys
import bio.c_htslib as htslib
	
def compare_pairs(lhs, rhs):
	if lhs.read1_coord == rhs.read1_coord and lhs.read2_coord == rhs.read2_coord \
		and lhs.read1_orientation == rhs.read1_orientation and lhs.read2_orientation == rhs.read2_orientation \
		and lhs.read1_refIndex == rhs.read1_refIndex and lhs.read2_refIndex == rhs.read2_refIndex:
		return True
	else:
		return False


filename = str(sys.argv[1])

# print ord(filename[0])

# bam_file = htslib.hts_open(filename.ptr, "r".ptr)
# bam_header = htslib.sam_hdr_read(bam_file)

# header_text = bam_header.text

# print bam_header.SortOrder.coordinate

# header = ''
i = 0

# print import_pysam(filename)

# paired_ends_to_check = list[ReadEnds]()
unpaired_ends = dict[str, ReadPair]()
all_paired_ends = list[ReadPair]()
all_reads = dict[str, SAMRecord]()
# read_ends = dict[seq, ReadPair]()

all_reads_idx = dict[int, str]()

duplicates = 0
sup_recs = 0

#open new sam file

# import python
# pydef import_mod():
	# # import graphviz
	# import pysam
	# # from numpy import arange
	# # # samfile = pysam.AlignmentFile(filename, "rb")
	# # return 0

# import_mod()

# from write_bam pyimport print_this () #-> int

# find and match pairs
for r in BAM(filename):
	
	if r.supplementary:
		sup_recs += 1
		i = i+1
		all_reads[r.name] = r
		all_reads_idx[i] = r.name
		continue
	
	if r.name in unpaired_ends:
		unpaired_ends[r.name].set_read2(r)
		all_paired_ends.append(unpaired_ends[r.name])
		
		del unpaired_ends[r.name]
		
	else:
		unpaired_ends[r.name] = ReadPair(r)
		
		
	all_reads[r.name] = r
	all_reads_idx[i] = r.name
	i = i+1

print "done with reading"


# find duplicates in the pairs
for i, pair1 in enumerate(all_paired_ends):
	for j, pair2 in enumerate(all_paired_ends):
		if i != j and (not pair1.duplicate and not pair2.duplicate): 
			if compare_pairs(pair1, pair2):
				pair1.duplicate = True
				pair2.duplicate = True
			
				duplicates += 1


# print header
print len(all_reads_idx)
print "num sup records: " + str(sup_recs)
print "number of reads: " + str(i)
print "number of fragments: " + str(len(unpaired_ends))
print "number of paired reads: " + str(len(all_paired_ends))
print "num duplicates: " + str(duplicates)
