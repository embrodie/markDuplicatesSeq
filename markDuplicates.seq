
# seqc markDuplicates.seq input_file.bam output_file.bam metrics_file.txt
# takes a bam file and finds all the duplicate reads
# creates a metrics file and a text file listing all the duplicate reads by name


from ReadPairClass import ReadPair

import sys
import bio.c_htslib as htslib
import python
from time pyimport ctime () -> str	
	
def compare_pairs(lhs, rhs):
	if lhs.read1_coord == rhs.read1_coord and lhs.read2_coord == rhs.read2_coord \
		and lhs.read1_orientation == rhs.read1_orientation and lhs.read2_orientation == rhs.read2_orientation \
		and lhs.read1_refIndex == rhs.read1_refIndex and lhs.read2_refIndex == rhs.read2_refIndex:
		return True
	else:
		return False


filename = str(sys.argv[1]).strip(' \t\n\r')
out_file = str(sys.argv[2]).strip(' \t\n\r')

metrics_filename = "marked_dup_metrics.txt"
if sys.argv[3]:
	metrics_filename = str(sys.argv[3]).strip(' \t\n\r')
	

metrics_file = open(metrics_filename, "w")
metrics_file.write("# MarkDuplicates INPUT=" + filename + " OUTPUT=" + out_file + " METRICS_FILE=" + metrics_filename + "\n")
metrics_file.write("# Started On: " + ctime() + "\n")

dup_reads_file = open("list_dups_"+filename+".txt", "w")

i = 0

unpaired_ends = dict[str, ReadPair]()
all_paired_ends = list[ReadPair]()

pairs_by_ref = dict[int, list[ReadPair]]()

duplicates = 0
sup_recs = 0
unmapped_recs = 0

# find and match pairs
print "reading in file"
for r in BAM(filename):
	
	if r.supplementary:
		sup_recs += 1
		i = i+1
		continue
	
	if r.unmapped:
		unmapped_recs += 1
		
	
	if r.name in unpaired_ends:
		unpaired_ends[r.name].set_read2(r)
		all_paired_ends.append(unpaired_ends[r.name])
		
		if r.tid not in pairs_by_ref:
			pairs_by_ref[r.tid] = [unpaired_ends[r.name]]
		else:
			pairs_by_ref[r.tid].append(unpaired_ends[r.name])
		
		del unpaired_ends[r.name]
		
	else:
		unpaired_ends[r.name] = ReadPair(r)

	i = i+1

print "Read in " + str(i) + " lines"

print "finding duplicates"
for ref in pairs_by_ref:
	for i, pair1 in enumerate(pairs_by_ref[ref]):
		for j, pair2 in enumerate(pairs_by_ref[ref]):
			if i != j and (not pair1.duplicate and not pair2.duplicate): 
				if compare_pairs(pair1, pair2):
					pair1.set_duplicate()
					pair2.set_duplicate()

					duplicates += 1
					dup_reads_file.write(pair1.read1.name + "\n" + pair2.read1.name + "\n")

dup_reads_file.close()


metrics_file.write("# METRICS\n")
metrics_file.write("LIBRARY READ_PAIRS_EXAIMINED SECONDARY_OR_SUPPLEMENTARY_READS UNMAPPED_READS READ_PAIR_DUPLICATES PERCENT_DUPLICATION\n")
metrics_file.write("Unknown " + str(len(all_paired_ends)) + " " + str(sup_recs) + " " + str(unmapped_recs) + " " + str(duplicates) + " " + str(duplicates/len(all_paired_ends)) + "\n")

metrics_file.close()

print "marking duplicates done"